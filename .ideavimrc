""" Preferences
set relativenumber
set ignorecase

""" Editing and Reloading the Config
set clipboard+=unnamed
set clipboard+=ideaput
map \e :e ~/.ideavimrc<CR>
map \r <Action>(IdeaVim.ReloadVimRc.reload)

""" The Leader Key
let mapleader=" "

""" Distraction Free Mode
map <c-z> <Action>(ToggleDistractionFreeMode)

""" Terminal
map <c-t> <Action>(ActivateTerminalToolWindow)
map tt <Action>(Terminal.OpenInTerminal)

""" Navigation
map <c-\> <Action>(SplitVertically)
map <c--> <Action>(SplitHorizontally)
map <c-=> <Action>(Unsplit)
map <c-m> <Action>(MoveEditorToOppositeTabGroup)
""" sethandler <c-j> a:vim
""" sethandler <c-k> a:vim
map <c-h> <c-w>h
map <c-l> <c-w>l
map <c-j> <c-w>j
map <c-k> <c-w>k
map <TAB> <Action>(PreviousTab)
map <s-TAB> <Action>(NextTab)
map <Leader>en <Action>(EditSourceInNewWindow)
map <Leader>n <Action>(NextWindow)
map <Leader>q <Action>(CloseContent)
map <Leader>qa <Action>(CloseAllEditors)

""" Editing source code
set ideajoin
set idearefactormode=keep
inoremap jk <ESC>
""" map << gvv
""" map >> gv
map [[ <Action>(MethodUp)
map ]] <Action>(MethodDown)
map zc <Action>(CollapseRegion)
map zo <Action>(ExpandRegion)
map <leader>zc <Action>(CollapseAllRegions)
map <leader>zo <Action>(ExpandAllRegions)
map <leader>c <Action>(CommentByLineComment)
map <leader>r <Action>(Refactorings.QuickListPopupAction)
map <Leader>=  <Action>(ReformatCode)
map <leader>o <Action>(OptimizeImports)
map <m-r> <Action>(RecentFiles)
map <leader>l <Action>(RecentLocations)
map <leader>h  <Action>(LocalHistory.ShowHistory)
map ge <Action>(GotoNextError)
map gE <Action>(GotoPreviousError)
map <m-i> <Action>(Generate)
""" map ??? <Action>(ShowIntentionActions)

""" Searching and Source Code Navigation
set incsearch
map <c-/> <Action>(FindInPath)
map <c-a> <Action>(GotoAction)
map <c-f> <Action>(GotoFile)
map <c-c> <Action>(GotoClass)
map <leader>u <Action>(FindUsages)
""" map <leader>s <Action>(GotoRelated)
map <leader>h <Action>(CallHierarchy)
map <leader>b <Action>(ShowNavBar)
map <c-s> <Action>(FileStructurePopup)
""" map <c-o> <Action>(GotoSymbol)
map gi <Action>(GotoImplementation)
map gd <Action>(GotoDeclaration)
map gp <Action>(GotoSuperMethod)
map gt <Action>(GotoTest)
""" gb <Action>(Back)
""" map gf <Action>(Forward)

""" Remap later
map <c-x> <Action>(HideAllWindows)

""" Inc and Dec
inoremap <m-a> <C-a>
inoremap <m-l> <C-d>

""" Running and Debugging
map ,r <Action>(ContextRun)
map ,c <Action>(RunClass)
map ,f <Action>(ChooseRunConfiguration)
map ,t <Action>(ActivateRunToolWindow)
map ,u <Action>(Rerun)
map ,f <Action>(RerunFailedTests)
map ,b <Action>(ToggleLineBreakpoint)
map ,d <Action>(ContextDebug)
map ,n <Action>(ActivateDebugToolWindow)

Plug 'easymotion/vim-easymotion'
map <leader>f <Plug>(easymotion-s)

set NERDTree
map <leader>t :NERDTree<CR>
map <leader>T :NERDTreeFind<CR>

Plug 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_start_word_key      = '<m-n>'
let g:multi_cursor_next_key            = '<m-n>'
let g:multi_cursor_prev_key            = '<m-p>'
let g:multi_cursor_skip_key            = '<m-x>'
let g:multi_cursor_quit_key            = '<Esc>'

Plug 'tpope/vim-commentary'

Plug 'tpope/vim-surround'

Plug 'tommcdo/vim-exchange'

Plug ‘michaeljsmith/vim-indent-object’

Plug 'machakann/vim-highlightedyank'
